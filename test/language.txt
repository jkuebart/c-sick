

struct data

	// all public
	int a:=5
	string s:="toast"
	// data* pdata:=nullptr // version 0.2

end


class student

	// default private or public or no default?
	public:

	ctor() // ctor named ctor?
	end

	dtor() // dtor named dtor?
	end

end


function main()

	// comment

	/* multiline
	   comment */

	\* multiline \* nestable *\ comment *\

	// assignment
	var a:=5 // auto
	val b:=3 // const auto
	// single "=" is never valid in order to avoid confusion between assignment and comparison
	var c:=7; var d:=8 // ";" and linebreak are equal
	var e:= ... // line continuation
		17

	if a<b
		print(a, "<", b)
	elseif a==b
		print(a, "==", b)
	else
		print(a, ">", b)
	end

	var f:= when e==17 then true else false // end? // ternary operator

	switch a
		case 1
			print("a is 1")
			// implicit break
		case 2
			print("a is 2")
			fall // prevents break
		default
			print("a is 2 or other")
	end

	while a<10
		a++
	end

	repeat
		a++
	until a==20

	repeat
		a++
	whilst a<30 // can be distinguished from nested while loop by the lack of "do" (in case "do" stays, maybe rather use "whilst"?)

	for i<=5 // 0 1 2 3 4 5
		print(i)
	end

	for 1<=i<5 // 1 2 3 4
		print(i)
	end

	for 5>i>=0 // 4 3 2 1 0
		print(i)
	end

	for 1<=i<10, i*=2 // 1 2 4 8
		print(i)
	end

	for i in {2, 3, 5, 7, 11}
		print(i)
	end

end

function oneLine; end

function noParams
end

function emptyParams()
end

function oneParam(int x)
end

function oneDefaultParam(int x:=0)
end

function twoParams(int x:=0, int y)
end

function simpleReturn -> int q
end

function simpleReturnDefaultValue -> int q:=0
	// implicit return q in the end if return value is initialized
end

function returnStruct -> (int q)
end

function returnStructDefaultValue -> (int q:=0)
end

function returnStructMultipleValues -> (int q:=0, int r)
	val r:=5
	return q, r
end

function returnStructMultipleDefaultValues -> (int q:=0, int r:=7)
	// implicit return q, r in the end when all return values are initialized
end

function fullMonty(int x:=0, int y) -> (int q:=0, int r)
end

/*

operator precedence:

associat.   operator description
--------------------------------------------------------
left        ::       scope resolution
--------------------------------------------------------
left        a++      postfix increment
            a--      postfix decrement
            a()      call
            a[]      subscript
            .        member access
            ->       member access
            custom
--------------------------------------------------------
right       ++a      prefix increment
            --a      prefix decrement
            +a       unary plus
            -a       unary minus
            not      logical not
            bitnot   bitwise not
            (type)   c-style cast
            *a       dereference
            @a       address-of
            sizeof   size-of
            new      dynamic memory allocation
            new[]    dynamic memory array allocation
            delete   dynamic memory deallocation
            delete[] dynamic memory array deallocation
            custom
--------------------------------------------------------
left        .*       pointer-to-member
            ->*      pointer-to-member
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        ^        exponentiation
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        a*b      multiplication
            a/b      division
            a mod b  remainder
            custom
--------------------------------------------------------
left        a+b      addition
            a-b      subtraction
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        shl      shift left
            shr      shift right
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        bitand   bitwise and
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        bitxor   bitwise xor
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        bitor    bitwise or
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        ==       equal
            !=       not equal
            <        lower than
            <=       lower or equal
            >        greater than
            >=       greater than or equal
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        and      logical and
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
left        or       logical or
            custom
--------------------------------------------------------
left        custom
--------------------------------------------------------
right       when     ternary conditional
            throw    throw operator
            custom
--------------------------------------------------------

assignments aren't operators

direct assignment
:=

compound assignment works with any infix operator
a $= b  translates to  a := a $ b

*/
