
// no structs

class student

	// default private or public or no default?
	public:

	ctor() // ctor named ctor?
		init // initializer list
			m_data:=5
		end
	end

	dtor() // dtor named dtor?
	end

	private:
	int m_data;
end


function main()

	// comment

	/* multiline
	   comment */

	\* multiline
	\* nestable *\
	   comment *\

	// assignment
	var a:=5 // auto
	val b:=3 // const auto
	// single "=" is never valid in order to avoid confusion between assignment and comparison
	var c:=7; var d:=8 // ";" and linebreak are equal
	var e:= ... // line continuation
		17

	if a<b
		print(a, "<", b)
	elseif a==b
		print(a, "==", b)
	else
		print(a, ">", b)
	end

	var f:= when e==17 then true else false // end? // ternary operator

	switch a
		case 1
			print("a is 1")
			// implicit break
		case 2
			print("a is 2")
			fall // prevents break
		default
			print("a is 2 or other")
	end

	while a<10
		a++
	end

	repeat
		a++
	until a==20

	repeat
		a++
	whilst a<30

	for i<=5 // 0 1 2 3 4 5
		print(i)
	end

	for 1<=i<5 // 1 2 3 4
		print(i)
	end

	for 5>i>=0 // 4 3 2 1 0
		print(i)
	end

	for 1<=i<10, i*=2 // 1 2 4 8
		print(i)
	end

	for i in {2, 3, 5, 7, 11}
		print(i)
	end

end

function oneLine; end

function noParams
end

function emptyParams()
end

function oneParam(int x)
end

function oneDefaultParam(int x:=0)
end

function twoParams(int x:=0, int y)
end

function simpleReturn -> int q
end

function simpleReturnDefaultValue -> int q:=0
	// implicit return q in the end if return value is initialized
end

function returnStruct -> (int q)
end

function returnStructDefaultValue -> (int q:=0)
end

function returnStructMultipleValues -> (int q:=0, int r)
	val r:=5
	return q, r
end

function returnStructMultipleDefaultValues -> (int q:=0, int r:=7)
	// implicit return q, r in the end when all return values are initialized
end

function fullMonty(int x:=0, int y) -> (int q:=0, int r)
end

/*

operator precedence:

classid  associat.   operator description
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
scope    left        ::       scope resolution
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
postfix  left        a++      postfix increment
                     a--      postfix decrement
                     a()      call
                     a[]      subscript
                     .        member access
                     ->       member access
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
prefix   right       ++a      prefix increment
                     --a      prefix decrement
                     +a       unary plus
                     -a       unary minus
                     not      logical not
                     bitnot   bitwise not
                     (type)   c-style cast
                     *a       dereference
                     @a       address-of
                     sizeof   size-of
                     new      dynamic memory allocation
                     new[]    dynamic memory array allocation
                     delete   dynamic memory deallocation
                     delete[] dynamic memory array deallocation
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
pmember  left        .*       pointer-to-member
                     ->*      pointer-to-member
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
power    left        ^        exponentiation
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
multiply left        a*b      multiplication
                     a/b      division
                     a mod b  remainder
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
add      left        a+b      addition
                     a-b      subtraction
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
shift    left        shl      shift left
                     shr      shift right
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
bitand   left        bitand   bitwise and
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
bitxor   left        bitxor   bitwise xor
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
bitor    left        bitor    bitwise or
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
compare  left        ==       equal
                     !=       not equal
                     <        lower than
                     <=       lower or equal
                     >        greater than
                     >=       greater than or equal
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
and      left        and      logical and
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
xor      left        xor      logical xor
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
or       left        or       logical or
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------
action   right       when     ternary conditional
                     throw    throw operator
                     custom
-----------------------------------------------------------------
         left        custom
-----------------------------------------------------------------

assignments aren't operators

direct assignment
:=

compound assignment works with any infix operator
a $= b  translates to  a := a $ b

*/

function sum(int a, int b) -> (int c:=a+b); end

function operators

	// will be shorter once the lua preprepreprocessor allows something like
	// #define \+/ operator sum before multiply
	// #define |+| operator sum with multiply
	// #define /+\ operator sum after multiply

	var c1 := 3*a operator sum before multiply 4*b

	var c2 := 3*a operator sum with multiply 4*b

	var c3 := 3*a operator sum after multiply 4*b

end
