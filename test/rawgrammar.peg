
Start <- skip (GlobalToken skip)*
SyntaxError <- (!nl .)* nl
Comment <- SingleLineComment / MultiLineComment
SingleLineComment <- '//' (!nl .)*
MultiLineComment <- '/*' (!'*/' .)* '*/'
NestableComment <- '\\*' (NestableComment / !'*\\' .)* '*\\'
AssignOperator <- ':='
Name <- NameStart NameMid* NameEnd
NameStart <- [a-zA-Z_]
NameMid <- [a-zA-Z_0-9]
NameEnd <- !NameMid
Keyword <- (FunctionKeyword / EndFunctionKeyword / IfKeyword / ElseIfKeyword / ElseIfKeyword / EndIfKeyword / SwitchKeyword / CaseKeyword / FallKeyword / DefaultKeyword / EndSwitchKeyword / WhileKeyword / EndWhileKeyword / RepeatKeyword / RepWhileKeyword / UntilKeyword) NameEnd
Identifier <- !Keyword (Name / VerbatimCpp)
GlobalToken <- (VerbatimCpp _ break) / GlobalDeclaration / SyntaxError
LocalToken <- (VerbatimCpp _ break) / Statement / SyntaxError
VerbatimCpp <- CppLimiter <CppCode*> CppLimiter
CppLimiter <- '$'
CppCode <- CppComment / CppStringLiteral / CppAnything
CppComment <- CppSingleLineComment / CppMultiLineComment
CppSingleLineComment <- '//' (!nl .)* nl
CppMultiLineComment <- '/*' (!'*/' .)* '*/'
CppStringLiteral <- CppCharConstant / CppSimpleString / CppMultiLineString
CppCharConstant <- '\'' (('\\' .) / .) '\''
CppSimpleString <- '"' (('\\' .) / (!'"' .))* '"'
CppMultiLineString <- 'R"' $delim[a-zA-Z_0-9]* '(' (!(')' $delim '"') .)* ')' $delim '"'
CppAnything <- (!CppLimiter .)
GlobalDeclaration <- FunctionDeclaration / SimpleDeclaration
LocalDeclaration <- SimpleDeclaration
SimpleDeclaration <- (Specifier ~ws)* Declaree ~_ (AssignOperator ~_ Expression ~_)? ~break
Specifier <- !Declaree Identifier
Declaree <- Identifier _ (&AssignOperator / &break)
FunctionDeclaration <- FunctionKeyword ws Identifier _ OptionalSpecifierList _ OptionalParameters _ OptionalReturnValues _ break OptionalFunctionBody EndFunctionKeyword _ break
FunctionKeyword <- 'function'
OptionalSpecifierList <- ('[' _ (Identifier _)* ']' )?
OptionalParameters <- ('(' _ ParameterDeclarationList _ ')')?
ParameterDeclarationList <- ParameterDeclaration (',' _ ParameterDeclaration)* / _
ParameterDeclaration <- (ParameterSpecifier _)* Parameter _ (AssignOperator _ Expression)?
ParameterSpecifier <- !Parameter Identifier
Parameter <- Identifier _ (&AssignOperator / &',' / &')')
OptionalReturnValues <- ('->' _ (SingleReturnValue / MultipleReturnValues))?
SingleReturnValue <- ParameterDeclaration
MultipleReturnValues <- '(' _ ReturnValueList _ ')'
ReturnValueList <- ParameterDeclaration _ (',' _ ParameterDeclaration _)* / _
OptionalFunctionBody <- skip (!EndFunctionKeyword LocalToken skip)*
EndFunctionKeyword <- 'end'
Statement <- LocalDeclaration / IfStatement / SwitchStatement / WhileStatement / RepeatStatement
IfStatement <- IfPart (ElseIfPart)* ElsePart? ~EndIfKeyword ~_ ~break
IfPart <- ~IfKeyword ~_ Condition ~_ ~break IfBody
IfKeyword <- 'if'
Condition <- Expression
IfBody <- skip (!ElseIfKeyword !ElseKeyword !EndIfKeyword LocalToken skip)*
ElseIfPart <- ~ElseIfKeyword ~_ Condition ~_ ~break IfBody
ElseIfKeyword <- 'elseif'
ElsePart <- ~ElseKeyword ~_ ~break IfBody
ElseKeyword <- 'else'
EndIfKeyword <- 'end'
SwitchStatement <- ~SwitchKeyword ~_ Condition ~_ ~break ~skip (Case ~skip)* ~EndSwitchKeyword
SwitchKeyword <- 'switch'
Case <- (CaseCondition / DefaultKeyword) ~break OptionalCaseBody (FallKeyword ~_ ~break)? ~skip
CaseCondition <- ~CaseKeyword ~_ (Expression / DefaultKeyword) ~_ (',' ~_ (Expression / DefaultKeyword) ~_)*
CaseKeyword <- 'case'
OptionalCaseBody <- skip (!FallKeyword !CaseKeyword !DefaultKeyword !EndSwitchKeyword LocalToken skip)*
FallKeyword <- 'fall'
DefaultKeyword <- 'default'
EndSwitchKeyword <- 'end'
WhileStatement <- ~WhileKeyword ~_ Condition ~_ ~break WhileBody ~EndWhileKeyword
WhileKeyword <- 'while'
WhileBody <- skip (!EndWhileKeyword LocalToken skip)*
EndWhileKeyword <- 'end'
RepeatStatement <- ~RepeatKeyword ~_ ~break RepeatBody (RepWhileKeyword / UntilKeyword) ~_ Condition ~_ ~break
RepeatKeyword <- 'repeat'
RepeatBody <- skip (!RepWhileKeyword !UntilKeyword LocalToken skip)*
RepWhileKeyword <- 'whilst'
UntilKeyword <- 'until'
Expression <- Throw
Atomic <- '(' ~_ Expression ~_ ')' / Identifier / [0-9]+
ScopeBinary <- ('::')
Scope <- Atomic ( ~_ ScopeBinary ~_ Atomic )*
AccessUnary <- ('(' ~_ Expression ~_ ')') / ('[' ~_ Expression ~_ ']')
AccessBinary <- ('.') / ('->')
Access <- Scope ( ~_ AccessUnary / ( AccessBinary ~_ Scope ) )*
PrefixUnary <- ('+') / ('-') / ('not') / ('bitnot') / ('^') / ('@') / ('sizeof')
Prefix <- ( PrefixUnary ~_ )* Access
ExponentiationBinary <- ('^')
Exponentiation <- Prefix ( ~_ ExponentiationBinary ~_ Prefix )*
MultiplicationBinary <- ('*') / ('/') / ('div') / ('mod')
Multiplication <- Exponentiation ( ~_ MultiplicationBinary ~_ Exponentiation )*
AdditionBinary <- ('+') / ('-')
Addition <- Multiplication ( ~_ AdditionBinary ~_ Multiplication )*
ShiftingBinary <- ('<<') / ('>>')
Shifting <- Addition ( ~_ ShiftingBinary ~_ Addition )*
BitConjunctionBinary <- ('bitand')
BitConjunction <- Shifting ( ~_ BitConjunctionBinary ~_ Shifting )*
BitExclusiveDisjunctionBinary <- ('bitxor')
BitExclusiveDisjunction <- BitConjunction ( ~_ BitExclusiveDisjunctionBinary ~_ BitConjunction )*
BitDisjunctionBinary <- ('bitor')
BitDisjunction <- BitExclusiveDisjunction ( ~_ BitDisjunctionBinary ~_ BitExclusiveDisjunction )*
ComparisonBinary <- ('==') / ('!=') / ('<') / ('<=') / ('>') / ('>=')
Comparison <- BitDisjunction ( ~_ ComparisonBinary ~_ BitDisjunction )*
ConjunctionBinary <- ('and')
Conjunction <- Comparison ( ~_ ConjunctionBinary ~_ Comparison )*
ExclusiveDisjunctionBinary <- ('xor')
ExclusiveDisjunction <- Conjunction ( ~_ ExclusiveDisjunctionBinary ~_ Conjunction )*
DisjunctionBinary <- ('or')
Disjunction <- ExclusiveDisjunction ( ~_ DisjunctionBinary ~_ ExclusiveDisjunction )*
ConditionalBinary <- ('?' ~_ Conditional ~_ ':')
Conditional <- Disjunction ( ~_ ConditionalBinary ~_ Disjunction )*
ThrowUnary <- ('throw')
Throw <- ( ThrowUnary ~_ )* Conditional
ws <- ([ \t] / ('...' _ nl) / Comment)* # definite whitespace
_ <- ws? # optional whitespace
nl <- '\r\n' / '\n' / !. # definite new line
break <- nl / ';' # end of something
skip <- _ (nl _)* # consume all new lines and whitespaces (and comments)
Placeholder <- [0-9]+ _
