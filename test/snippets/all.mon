
// no structs

// classes should only have external methods
class student

	// default private or public or no default?
	// public:

	ctor() // ctor named ctor?
		init // initializer list
			m_data:=5
		end
	end

	dtor() // dtor named dtor?
	end

	// private:
	int m_data;
end

function main()

	// comment

	/* multiline
	   comment */

	\* multiline
	\* nestable *\
	   comment *\

	// assignment
	var a:=5 // auto
	val b:=3 // const auto
	// single "=" is never valid in order to avoid confusion between assignment and comparison
	var c:=7; var d:=8 // ";" and linebreak are equal
	var e:= ... // line continuation
		17

	if 123
		print(a, "<", b)
	elseif 456
		print(a, "==", b)
	else
		print(a, ">", b)
	end

	//var f:= when e==17 then true else false // end? // ternary operator
	var f := { -1 if x<0, 1 if x>0, 0 otherwise

	$ double x = 5; $

	switch thing
		case 1
			print("1")
		case 2
			print("2")
			fall
		case 3,4,5
			print("2345")
		default
			print(">5")
	end

	switch thing
		case 1, default, 2
			print("1/2/!3")
		case 3
			print("3")
	end

	while a<10
		a := a+1
	end

	repeat
		a := a+1
	until a==20

	repeat
		a := a+1
	whilst a<30

	for i<=5 // 0 1 2 3 4 5
		print(i)
	end

	for 1<=i<5 // 1 2 3 4
		print(i)
	end

	for 5>i>=0 // 4 3 2 1 0
		print(i)
	end

	for 1<=i<10, i*=2 // 1 2 4 8
		print(i)
	end

	for i in {2, 3, 5, 7, 11}
		print(i)
	end

	twoParams(y:=4) // kwargs

end

function oneLine; end

function noParams
end

function emptyParams()
end

function oneParam(int x)
end

function oneDefaultParam(int x:=0)
end

function twoParams(int x:=0, int y)
end

// if it's not initialized, it doesn't get a name
function simpleReturn -> int
end

function simpleReturnDefaultValue -> int q:=0
	// implicit return q in the end if return value is initialized
end

function returnStruct -> (int q)
end

function returnStructDefaultValue -> (int q:=0)
end

function returnStructMultipleValues -> (int q:=0, int r)
	val r:=5
	return q, r
end

function returnStructMultipleDefaultValues -> (int q:=0, int r:=7)
	// implicit return q, r in the end when all return values are initialized
end

function fullMonty(int x:=0, int y) -> (int q:=0, int r)
end

/*

assignments aren't operators

direct assignment
:=

compound assignment works with any infix operator
a &:= b  translates to  a := a & b

*/
