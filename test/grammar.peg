
Start <- skip (GlobalToken skip)*

SyntaxError <- (!nl .)* nl

Comment <- SingleLineComment / MultiLineComment / NestableComment
	SingleLineComment <- '//' (!nl .)*
	MultiLineComment <- '/*' (!'*/' .)* '*/'
	NestableComment <- '\\*' (NestableComment / !'*\\' .)* '*\\'

AssignOperator <- ':='

Name <- NameStart NameMid* NameEnd
	NameStart <- [a-zA-Z_]
	NameMid <- [a-zA-Z_0-9]
	NameEnd <- !NameMid

Keyword <- (FunctionKeyword / EndFunction / IfKeyword / ElseIfKeyword / ElseIfKeyword / EndIf / SwitchKeyword / CaseKeyword / FallKeyword / DefaultKeyword / EndSwitch / WhileKeyword / EndWhile / RepeatKeyword / RepWhileKeyword / UntilKeyword) NameEnd

Identifier <- !Keyword (Name / VerbatimCpp)

GlobalToken <- (VerbatimCpp _ break) / GlobalDeclaration / SyntaxError
LocalToken <- Statement / SyntaxError

VerbatimCpp <- CppLimiter CppCode* CppLimiter
	CppLimiter <- '$'
	CppCode <- CppComment / CppStringLiteral / CppAnything
	CppComment <- CppSingleLineComment / CppMultiLineComment
	CppSingleLineComment <- '//' (!nl .)* nl
	CppMultiLineComment <- '/*' (!'*/' .)* '*/'
	CppStringLiteral <- CppCharConstant / CppSimpleString / CppMultiLineString
	CppCharConstant <- '\'' (('\\' .) / .) '\''
	CppSimpleString <- '"' (('\\' .) / (!'"' .))* '"'
	CppMultiLineString <- 'R"' $delim[a-zA-Z_0-9]* '(' (!(')' $delim '"') .)* ')' $delim '"'
	CppAnything <- (!CppLimiter .)

GlobalDeclaration <- FunctionDeclaration / SimpleDeclaration
LocalDeclaration <- SimpleDeclaration
	SimpleDeclaration <- (Specifier ws)* Declaree _ (AssignOperator _ Placeholder _)? break
	Specifier <- !Declaree Identifier
	Declaree <- Identifier _ (&AssignOperator / &break)

FunctionDeclaration <- FunctionKeyword ws Identifier _ OptionalSpecifierList _ OptionalParameters _ OptionalReturnValues _ break OptionalFunctionBody EndFunction _ break
	FunctionKeyword <- 'function'
	OptionalSpecifierList <- ('[' _ (Identifier _)* ']' )?
	OptionalParameters <- ('(' _ ParameterDeclarationList _ ')')?
	ParameterDeclarationList <- ParameterDeclaration (',' _ ParameterDeclaration)* / _
	ParameterDeclaration <- (ParameterSpecifier _)* Parameter _ (AssignOperator _ Placeholder)?
	ParameterSpecifier <- !Parameter Identifier
	Parameter <- Identifier _ (&AssignOperator / &',' / &')')
	OptionalReturnValues <- ('->' _ (SingleReturnValue / MultipleReturnValues))?
	SingleReturnValue <- ParameterDeclaration
	MultipleReturnValues <- '(' _ ReturnValueList _ ')'
	ReturnValueList <- ParameterDeclaration _ (',' _ ParameterDeclaration _)* / _
	OptionalFunctionBody <- skip (!EndFunction LocalToken skip)*
	EndFunction <- 'end'

Statement <- LocalDeclaration / IfStatement / SwitchStatement / WhileStatement / RepeatStatement

IfStatement <- IfPart (ElseIfPart)* ElsePart? EndIf _ break
	IfPart <- IfKeyword ws Condition _ break IfBody
	IfKeyword <- 'if'
	Condition <- Placeholder
	IfBody <- skip (!ElseIfKeyword !ElseKeyword !EndIf LocalToken skip)*
	ElseIfPart <- ElseIfKeyword ws Condition _ break IfBody
	ElseIfKeyword <- 'elseif'
	ElsePart <- ElseKeyword _ break IfBody
	ElseKeyword <- 'else'
	EndIf <- 'end'

SwitchStatement <- SwitchKeyword ws Condition _ break skip (Case skip)* DefaultCase? skip EndSwitch
	SwitchKeyword <- 'switch'
	Case <- CaseKeyword ws Placeholder _ (',' _ Placeholder _)* break OptionalCaseBody (FallKeyword _ break)? skip
	CaseKeyword <- 'case'
	OptionalCaseBody <- skip (!FallKeyword !CaseKeyword !DefaultKeyword !EndSwitch LocalToken skip)*
	FallKeyword <- 'fall'
	DefaultKeyword <- 'default'
	DefaultCase <- DefaultKeyword break OptionalCaseBody (FallKeyword break)? skip
	EndSwitch <- 'end'

WhileStatement <- WhileKeyword ws Condition _ break WhileBody EndWhile
	WhileKeyword <- 'while'
	WhileBody <- skip (!EndWhile LocalToken skip)*
	EndWhile <- 'end'

RepeatStatement <- RepeatKeyword ws break RepeatBody (RepWhileKeyword / UntilKeyword) ws Condition _ break
	RepeatKeyword <- 'repeat'
	RepeatBody <- skip (!RepWhileKeyword !UntilKeyword LocalToken skip)*
	RepWhileKeyword <- 'whilst'
	UntilKeyword <- 'until'

Expression <- List(AfterActionTerm, AfterActionOperator)

	AfterActionOperator <- CustomOperator('after', 'action')
	AfterActionTerm <- (ActionTerm _ '?' _ AfterActionTerm _ ':' _ AfterActionTerm) / ('throw' _ AfterActionTerm) / (CustomOperator('with', 'action') _ AfterActionTerm)
	ActionTerm <- List(BeforeActionTerm, BeforeActionOperator)
	BeforeActionOperator <- CustomOperator('before', 'action') / CustomOperator('after', 'or')
	BeforeOrTerm <- InfixList(OrTerm, OrOperator)

	OrOperator <- 'or' / CustomOperator('with', 'or')
	OrTerm <- InfixList(BeforeOrTerm, BeforeOrOperator)
	BeforeOrOperator <- CustomOperator('before', 'or') / CustomOperator('after', 'xor')
	BeforeXorTerm <- InfixList(XorTerm, XorOperator)

	XorOperator <- 'xor' / CustomOperator('with', 'xor')
	XorTerm <- InfixList(BeforeXorTerm, BeforeXorOperator)
	BeforeXorOperator <- CustomOperator('before', 'xor') / CustomOperator('after', 'and')
	BeforeAndTerm <- InfixList(AndTerm, AndOperator)

	AndOperator <- 'and' / CustomOperator('with', 'and')
	AndTerm <- InfixList(BeforeAndTerm, BeforeAndOperator)
	BeforeAndOperator <- CustomOperator('before', 'and') / CustomOperator('after', 'compare')
	BeforeCompareTerm <- InfixList(CompareTerm, CompareOperator)

	CompareOperator <- '==' / '!=' / '<' / '<=' / '>' / '>=' / CustomOperator('with', 'compare')
	CompareTerm <- InfixList(BeforeCompareTerm, BeforeCompareOperator)
	BeforeCompareOperator <- CustomOperator('before', 'compare') / CustomOperator('after', 'bitor')
	BeforeBitorTerm <- InfixList(BitorTerm, BitorOperator)

	BitorOperator <- 'bitor' / CustomOperator('with', 'bitor')
	BitorTerm <- InfixList(BeforeBitorTerm, BeforeBitorOperator)
	BeforeBitorOperator <- CustomOperator('before', 'bitor') / CustomOperator('after', 'bitxor')
	BeforeBitxorTerm <- InfixList(BitxorTerm, BitxorOperator)

	BitxorOperator <- 'bitxor' / CustomOperator('with', 'bitxor')
	BitxorTerm <- InfixList(BeforeBitxorTerm, BeforeBitxorOperator)
	BeforeBitxorOperator <- CustomOperator('before', 'bitxor') / CustomOperator('after', 'bitand')
	BeforeBitandTerm <- InfixList(BitandTerm, BitandOperator)

	BitandOperator <- 'bitand' / CustomOperator('with', 'bitand')
	BitandTerm <- InfixList(BeforeBitandTerm, BeforeBitandOperator)
	BeforeBitandOperator <- CustomOperator('before', 'bitand') / CustomOperator('after', 'shift')
	BeforeShiftTerm <- InfixList(ShiftTerm, ShiftOperator)

	ShiftOperator <- '<<' / '>>' / CustomOperator('with', 'shift')
	ShiftTerm <- InfixList(BeforeShiftTerm, BeforeShiftOperator)
	BeforeShiftOperator <- CustomOperator('before', 'shift') / CustomOperator('after', 'add')
	BeforeAddTerm <- InfixList(AddTerm, AddOperator)

	AddOperator <- '+' / '-' / CustomOperator('with', 'add')
	AddTerm <- InfixList(BeforeAddTerm, BeforeAddOperator)
	BeforeAddOperator <- CustomOperator('before', 'add') / CustomOperator('after', 'multiply')
	BeforeMultiplyTerm <- InfixList(MultiplyTerm, MultiplyOperator)

	MultiplyOperator <- '*' / '/' / 'div' / 'mod' / CustomOperator('with', 'multiply')
	MultiplyTerm <- InfixList(BeforeMultiplyTerm, BeforeMultiplyOperator)
	BeforeMultiplyOperator <- CustomOperator('before', 'multiply') / CustomOperator('after', 'power')
	BeforePowerTerm <- InfixList(PowerTerm, PowerOperator)

	PowerOperator <- '^' / CustomOperator('with', 'power')
	PowerTerm <- InfixList(BeforePowerTerm, BeforePowerOperator)
	BeforePowerOperator <- CustomOperator('before', 'power') / CustomOperator('after', 'pmember')
	BeforePmemberTerm <- InfixList(PmemberTerm, PmemberOperator)

	PmemberOperator <- '.*' / '->*' / CustomOperator('with', 'pmember')
	PmemberTerm <- InfixList(BeforePmemberTerm, BeforePmemberOperator)
	BeforePmemberOperator <- CustomOperator('before', 'pmember') / CustomOperator('after', 'prefix')
	BeforePrefixTerm <- InfixList(PrefixTerm, PrefixOperator)

	PrefixOperator <- '++' / '--' / '+' / '-' / 'not' / 'bitnot' / '(' _ Identifier _ ')' / '^' / '@' / 'sizeof' / 'new' / 'new[]' / 'delete' / 'delete[]' / CustomOperator('with', 'prefix')
	PrefixTerm <- PrefixList(BeforePrefixTerm, BeforePrefixOperator)
	BeforePrefixOperator <- CustomOperator('before', 'prefix') / CustomOperator('after', 'postfix')
	BeforePostfixTerm <- InfixList(PostfixTerm, PostfixOperator)

	PostfixOperator <- '++' / '--' / '(' _ Placeholder _ ')' / '[' _ Placeholder _ ']' / '.' / '->' / CustomOperator('with', 'postfix')
	PostfixTerm <- PostfixList(BeforePostfixTerm, BeforePostfixOperator)
	BeforePostfixOperator <- CustomOperator('before', 'postfix') / CustomOperator('after', 'scope')
	BeforeScopeTerm <- InfixList(ScopeTerm, ScopeOperator)

	ScopeOperator <- '::' / CustomOperator('with', 'scope')
	ScopeTerm <- InfixList(BeforeScopeTerm, BeforeScopeOperator)
	BeforeScopeOperator <- CustomOperator('before', 'scope')

	BeforeScopeTerm <- Number / Identifier / '(' _ Expression _ ')'

	PrefixList(Id, Op) <- (Op _)* Id
	InfixList(Id, Op) <- Id (_ Op _ Id)*
	PostfixList(Id, Op <- Id (_ Op)*


ws <- ([ \t] / ('...' _ nl) / Comment)* # definite whitespace
_ <- ws? # optional whitespace
nl <- '\r\n' / '\n' # definite whitespace
break <- nl / ';' # end of something
skip <- _ (nl _)* # consume all new lines and whitespaces (and comments)
Placeholder <- [0-9]* _
